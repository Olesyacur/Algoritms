'''
Вычислить хеши произвольных подстрок данной строки.
На вход поступают запросы на подсчёт хешей разных подстрок. Ответ на каждый
запрос должен выполняться за O(1). Допустимо в начале работы программы сделать
предподсчёт для дальнейшей работы со строкой.

В данной задаче необходимо использовать в качестве значений отдельных символов
их коды в таблице ASCII.

Формат ввода
В первой строке дано число a (1 ≤ a ≤ 1000) –— основание, по которому
считается хеш. Во второй строке дано число m (1 ≤ m ≤ 107) –— модуль. В
третьей строке дана строка s (0 ≤ |s| ≤ 106), состоящая из больших и маленьких
латинских букв.
В четвертой строке дано число запросов t –— натуральное число от 1 до 105. В
каждой из следующих t строк записаны через пробел два числа l и r –— индексы
начала и конца очередной подстроки. (1 ≤ l ≤ r ≤ |s|).

Формат вывода
Для каждого запроса выведите на отдельной строке хеш заданной в запросе
подстроки.'''

# Рассчитываем хеш строки, используя префиксную сумму


def prefix_hash(basis, mod, string):
    hash = [0] * (len(string) + 1)
    for i in range(1, len(string) + 1):
        hash[i] = (hash[i - 1] * basis + ord(string[i - 1])) % mod
    return hash

# Рассчитываем остаточный множитель, который нужен для вычисления хеша
# подстроки


def res_multipl(basis, mod, string):
    multipl = [0] * (len(string) + 1)
    multipl[0] = 1
    for i in range(1, len(string) + 1):
        multipl[i] = (multipl[i - 1] * basis) % mod
    return multipl


basis = int(input())
mod = int(input())
string = input()

hash = prefix_hash(basis, mod, string)
multipl = res_multipl(basis, mod, string)

t = int(input())
for i in range(t):
    l, r = map(int, input().split())
    print((hash[r] - hash[l - 1] * multipl[r - l + 1]) % mod)
